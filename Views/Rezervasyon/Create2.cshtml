@model VipTransfer.Web.Models.ViewModels.RezervasyonViewModel
@{
    ViewData["Title"] = "Yeni Rezervasyon";
}

<div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">@ViewData["Title"]</h1>
    
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="bg-gradient-to-r from-blue-700 to-purple-700 p-6 text-white">
            <h2 class="text-xl font-semibold">Transfer Bilgileri</h2>
            <p class="mt-2 text-blue-100">Lütfen transfer detaylarını girin</p>
        </div>
        
        <div class="p-6">
            <form asp-action="Create" method="post" id="rezervasyonForm">
                <div asp-validation-summary="ModelOnly" class="text-red-600 mb-4"></div>
                
                <!-- Transfer Bilgileri -->
                <div class="space-y-6 mb-8">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="relative">
                            <label asp-for="Nereden" class="block text-gray-700 text-sm font-medium mb-2">
                                <i class="fas fa-map-marker-alt text-blue-600 mr-1"></i> Nereden
                            </label>
                            <input 
                                asp-for="Nereden" 
                                id="nereden" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm transition" 
                                placeholder="Başlangıç noktası">
                            <div id="nereden-results" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden"></div>
                            <span asp-validation-for="Nereden" class="text-sm text-red-600"></span>
                        </div>
                        
                        <div class="relative">
                            <label asp-for="Nereye" class="block text-gray-700 text-sm font-medium mb-2">
                                <i class="fas fa-flag-checkered text-blue-600 mr-1"></i> Nereye
                            </label>
                            <input 
                                asp-for="Nereye" 
                                id="nereye" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm transition" 
                                placeholder="Varış noktası">
                            <div id="nereye-results" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden"></div>
                            <span asp-validation-for="Nereye" class="text-sm text-red-600"></span>
                        </div>
                    </div>
                    
                    <!-- Harita Önizleme -->
                    <div id="map-container" class="bg-gray-50 rounded-xl p-4 transition-all duration-300 hidden">
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-gray-800 font-medium">Güzergah Önizleme</h3>
                            <button type="button" id="close-map" class="text-gray-500 hover:text-gray-700">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div id="map" style="height: 300px; width: 100%; border-radius: 8px;"></div>
                        <div class="mt-2 flex justify-between text-sm">
                            <span>Mesafe: <strong id="route-distance">-</strong></span>
                            <span>Tahmini Süre: <strong id="route-duration">-</strong></span>
                        </div>
                    </div>
                                        
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label asp-for="RezervasyonTarihi" class="block text-gray-700 text-sm font-medium mb-2">
                                <i class="fas fa-calendar-alt text-blue-600 mr-1"></i> Tarih
                            </label>
                            <input 
                                asp-for="RezervasyonTarihi" 
                                type="date" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm" 
                                min="@DateTime.Now.ToString("yyyy-MM-dd")">
                            <span asp-validation-for="RezervasyonTarihi" class="text-sm text-red-600"></span>
                        </div>
                        
                        <div>
                            <label asp-for="RezervasyonSaati" class="block text-gray-700 text-sm font-medium mb-2">
                                <i class="fas fa-clock text-blue-600 mr-1"></i> Saat
                            </label>
                            <input 
                                asp-for="RezervasyonSaati" 
                                type="time" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm">
                            <span asp-validation-for="RezervasyonSaati" class="text-sm text-red-600"></span>
                        </div>
                    </div>
                    
                    <div>
                        <label asp-for="UcusNo" class="block text-gray-700 text-sm font-medium mb-2">
                            <i class="fas fa-plane text-blue-600 mr-1"></i> Uçuş Numarası (Opsiyonel)
                        </label>
                        <input 
                            asp-for="UcusNo" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 shadow-sm" 
                            placeholder="Örn: TK1234">
                        <span asp-validation-for="UcusNo" class="text-sm text-red-600"></span>
                    </div>
                </div>
                
                <!-- Araç Seçimi -->
                <div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                        <i class="fas fa-car text-blue-600 mr-2"></i> Araç Seçimi
                    </h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                        @if (Model.AracListesi != null && Model.AracListesi.Any())
                        {
                            @foreach (var arac in Model.AracListesi)
                            {
                                <div class="vehicle-card border border-gray-200 rounded-xl p-4 cursor-pointer hover:border-blue-500 hover:shadow-md transition relative overflow-hidden" 
                                     data-arac-guid="@arac.ARACGUID"
                                     onclick="selectVehicle('@arac.ARACGUID', this)">
                                    <input type="radio" name="SeciliAracGUID" value="@arac.ARACGUID" class="hidden vehicle-radio">
                                    
                                    <!-- Araç Tip Badge -->
                                    @{
                                        string badgeClass = "";
                                        string badgeText = "";
                                        
                                        switch (arac.TIP)
                                        {
                                            case 1:
                                                badgeClass = "bg-blue-100 text-blue-800";
                                                badgeText = "Ekonomik";
                                                break;
                                            case 2:
                                                badgeClass = "bg-green-100 text-green-800";
                                                badgeText = "VIP";
                                                break;
                                            case 3:
                                                badgeClass = "bg-purple-100 text-purple-800";
                                                badgeText = "Lüks";
                                                break;
                                            default:
                                                badgeClass = "bg-gray-100 text-gray-800";
                                                badgeText = "Diğer";
                                                break;
                                        }
                                    }
                                    
                                    <div class="absolute top-2 right-2">
                                        <span class="px-2 py-1 text-xs font-semibold rounded-full @badgeClass">
                                            @badgeText
                                        </span>
                                    </div>
                                    
                                    <div class="flex flex-col items-center">
                                        <div class="bg-blue-50 rounded-full p-4 mb-3">
                                            @if (arac.TIP == 1)
                                            {
                                                <i class="fas fa-car text-3xl text-blue-600"></i>
                                            }
                                            else if (arac.TIP == 2)
                                            {
                                                <i class="fas fa-car-side text-3xl text-green-600"></i>
                                            }
                                            else if (arac.TIP == 3)
                                            {
                                                <i class="fas fa-shuttle-van text-3xl text-purple-600"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-bus text-3xl text-gray-600"></i>
                                            }
                                        </div>
                                        <h4 class="font-semibold text-center">@arac.MARKA @arac.MODEL</h4>
                                        <p class="text-sm text-gray-600 text-center">@arac.PLAKA</p>
                                        
                                        <!-- Araç Özellikleri İkonları -->
                                        <div class="flex justify-center gap-3 mt-3">
                                            @if (arac.KOLTUKSAYISI.HasValue)
                                            {
                                                <div class="flex items-center text-gray-600" title="Koltuk Sayısı">
                                                    <i class="fas fa-users text-xs mr-1"></i>
                                                    <span class="text-xs">@arac.KOLTUKSAYISI</span>
                                                </div>
                                            }
                                            
                                            @if (arac.BAGAJKAPASITESI.HasValue)
                                            {
                                                <div class="flex items-center text-gray-600" title="Bagaj Kapasitesi">
                                                    <i class="fas fa-suitcase text-xs mr-1"></i>
                                                    <span class="text-xs">@arac.BAGAJKAPASITESI</span>
                                                </div>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(arac.YAKITTURU))
                                            {
                                                <div class="flex items-center text-gray-600" title="Yakıt Türü">
                                                    <i class="fas fa-gas-pump text-xs mr-1"></i>
                                                    <span class="text-xs">@(arac.YAKITTURU.Length > 1 ? arac.YAKITTURU.Substring(0, 1) : arac.YAKITTURU)</span>
                                                </div>
                                            }
                                        </div>
                                        
                                        <!-- Seçildi İşareti -->
                                        <div class="vehicle-selected-indicator absolute inset-0 bg-blue-500 bg-opacity-10 items-center justify-center hidden">
                                            <div class="bg-blue-600 text-white rounded-full p-2">
                                                <i class="fas fa-check"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="col-span-3 text-center text-gray-500 py-4 border border-gray-200 rounded-lg">Araç bulunamadı.</p>
                        }
                    </div>
                </div>
                
                <div id="aracSecimHata" class="text-sm text-red-600 mb-4 hidden">Lütfen bir araç seçin</div>
                
                @* <!-- Ücret Bilgisi -->
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-100 rounded-xl p-6 mb-8">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                        <i class="fas fa-receipt text-blue-600 mr-2"></i> Ücret Bilgisi
                    </h3>
                    
                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <span class="text-gray-700">Tahmini Mesafe:</span>
                            <span id="tahminiMesafe" class="font-semibold text-gray-900 bg-white px-3 py-1 rounded-md shadow-sm">0 km</span>
                            <input asp-for="TahminiKm" type="hidden" value="0">
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-gray-700">Transfer Ücreti:</span>
                            <span id="transferUcreti" class="font-semibold text-xl text-blue-700 bg-white px-3 py-1 rounded-md shadow-sm">0 ₺</span>
                            <input asp-for="Ucret" type="hidden" value="0">
                        </div>
                        
                        <button type="button" id="hesaplaBtn" class="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition flex items-center justify-center">
                            <i class="fas fa-calculator mr-2"></i> Ücreti Hesapla
                        </button>
                    </div>
                </div> *@
                
                <!-- Onay Butonu -->
                <div class="animate-pulse" id="submit-container">
                    <button type="submit" id="submitBtn" class="w-full bg-gradient-to-r from-blue-700 to-purple-700 text-white text-center py-4 rounded-xl font-semibold hover:from-blue-800 hover:to-purple-800 transition shadow-md disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <i class="fas fa-check-circle mr-2"></i> Rezervasyonu Oluştur
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .vehicle-card.selected {
            border-color: #3b82f6;
            background-color: #eff6ff;
        }
        
        .vehicle-card.selected .vehicle-selected-indicator {
            display: flex;
        }
        
        .pac-container {
            z-index: 1050;
            border-radius: 0.5rem;
            margin-top: 4px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .pac-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        
        .pac-item:hover {
            background-color: #f3f4f6;
        }
        
        .pac-item-selected {
            background-color: #eff6ff;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Leaflet ve OpenStreetMap ile Harita
        function initFreeMap() {
            // Leaflet CSS
            const leafletCSS = document.createElement('link');
            leafletCSS.rel = 'stylesheet';
            leafletCSS.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
            document.head.appendChild(leafletCSS);
            
            // Leaflet Routing Machine CSS
            const routingCSS = document.createElement('link');
            routingCSS.rel = 'stylesheet';
            routingCSS.href = 'https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css';
            document.head.appendChild(routingCSS);
            
            // Leaflet JS
            const leafletScript = document.createElement('script');
            leafletScript.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
            document.body.appendChild(leafletScript);
            
            // Leaflet Routing Machine JS (yol tarifi için)
            leafletScript.onload = function() {
                const routingScript = document.createElement('script');
                routingScript.src = 'https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js';
                document.body.appendChild(routingScript);
                
                routingScript.onload = setupMap;
            };
        }

        // Harita kurulumu
        function setupMap() {
            // İstanbul merkezi
            const istanbul = [41.0082, 28.9784];
            
            // Harita oluştur
            const map = L.map('map').setView(istanbul, 10);
            
            // OpenStreetMap altlık haritası
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            
            // Routing kontrolü
            let routingControl = null;
            
            // Adres arama için Photon API (OpenStreetMap tabanlı ücretsiz geocoding)
            setupAutocomplete('nereden', processRouting);
            setupAutocomplete('nereye', processRouting);
            
            // Rota işleme
            function processRouting() {
                const nereden = document.getElementById('nereden').value;
                const nereye = document.getElementById('nereye').value;
                
                if (!nereden || !nereye) return;
                
                // Her iki adres de girildiğinde rota hesapla
                Promise.all([
                    geocodeAddress(nereden),
                    geocodeAddress(nereye)
                ]).then(results => {
                    const [fromCoords, toCoords] = results;
                    
                    if (!fromCoords || !toCoords) {
                        console.error('Koordinatlar bulunamadı');
                        return;
                    }
                    
                    // Harita konteynerini göster
                    document.getElementById('map-container').classList.remove('hidden');
                    
                    // Haritayı güncelle
                    map.invalidateSize();
                    
                    // Önceki rotayı temizle
                    if (routingControl) {
                        map.removeControl(routingControl);
                    }
                    
                    // Yeni rota oluştur
                    routingControl = L.Routing.control({
                        waypoints: [
                            L.latLng(fromCoords[0], fromCoords[1]),
                            L.latLng(toCoords[0], toCoords[1])
                        ],
                        routeWhileDragging: false,
                        showAlternatives: false,
                        fitSelectedRoutes: true,
                        show: false // Yönlendirme panelini gizle
                    }).addTo(map);
                    
                    routingControl.on('routesfound', function(e) {
                        const routes = e.routes;
                        const summary = routes[0].summary;
                        
                        // Mesafe ve süre bilgisini güncelle
                        document.getElementById('route-distance').textContent = 
                            (summary.totalDistance / 1000).toFixed(1) + ' km';
                            
                        document.getElementById('route-duration').textContent = 
                            Math.round(summary.totalTime / 60) + ' dakika';
                        
                        // Form için değerleri güncelle
                        document.getElementById('TahminiKm').value = 
                            (summary.totalDistance / 1000).toFixed(2);
                    });
                });
            }
            
            // Adres geocoding (koordinata dönüştürme)
            async function geocodeAddress(address) {
                try {
                    // Photon API ile arama
                    const response = await fetch(`https://photon.komoot.io/api/?q=${encodeURIComponent(address)}&limit=1`);
                    const data = await response.json();
                    
                    if (data.features && data.features.length > 0) {
                        const coords = data.features[0].geometry.coordinates;
                        // Photon, [lon, lat] döndürür, biz [lat, lon] formatına döndürüyoruz
                        return [coords[1], coords[0]];
                    }
                    return null;
                } catch (error) {
                    console.error('Geocoding hatası:', error);
                    return null;
                }
            }
            
            // Adres otomatik tamamlama
            function setupAutocomplete(inputId, callback) {
                const input = document.getElementById(inputId);
                const resultsDiv = document.createElement('div');
                resultsDiv.className = 'absolute z-10 w-full bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto';
                resultsDiv.style.display = 'none';
                input.parentNode.appendChild(resultsDiv);
                
                let debounceTimer;
                
                input.addEventListener('input', function() {
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(async function() {
                        const query = input.value.trim();
                        if (query.length < 3) {
                            resultsDiv.style.display = 'none';
                            return;
                        }
                        
                        try {
                            const response = await fetch(`https://photon.komoot.io/api/?q=${encodeURIComponent(query)}&limit=5`);
                            const data = await response.json();
                            
                            if (data.features && data.features.length > 0) {
                                resultsDiv.innerHTML = '';
                                data.features.forEach(feature => {
                                    const properties = feature.properties;
                                    let label = '';
                                    
                                    // Adres bileşenlerini birleştir
                                    if (properties.name) label += properties.name;
                                    if (properties.street) {
                                        if (label) label += ', ';
                                        label += properties.street;
                                        if (properties.housenumber) label += ' ' + properties.housenumber;
                                    }
                                    if (properties.city) {
                                        if (label) label += ', ';
                                        label += properties.city;
                                    }
                                    if (properties.state) {
                                        if (label) label += ', ';
                                        label += properties.state;
                                    }
                                    if (properties.country) {
                                        if (label) label += ', ';
                                        label += properties.country;
                                    }
                                    
                                    const option = document.createElement('div');
                                    option.className = 'p-2 hover:bg-gray-100 cursor-pointer';
                                    option.textContent = label;
                                    option.addEventListener('click', function() {
                                        input.value = label;
                                        resultsDiv.style.display = 'none';
                                        callback();
                                    });
                                    resultsDiv.appendChild(option);
                                });
                                
                                resultsDiv.style.display = 'block';
                            } else {
                                resultsDiv.style.display = 'none';
                            }
                        } catch (error) {
                            console.error('Otomatik tamamlama hatası:', error);
                            resultsDiv.style.display = 'none';
                        }
                    }, 300);
                });
                
                // Dışarı tıklandığında sonuçları gizle
                document.addEventListener('click', function(e) {
                    if (e.target !== input && e.target !== resultsDiv) {
                        resultsDiv.style.display = 'none';
                    }
                });
            }
        }
        
        // Araç seçimi
        function selectVehicle(aracGuid, element) {
            // Tüm seçimleri kaldır
            document.querySelectorAll('.vehicle-card').forEach(card => {
                card.classList.remove('selected');
            });
            
            // Radyo butonlarını temizle
            document.querySelectorAll('.vehicle-radio').forEach(radio => {
                radio.checked = false;
            });
            
            // Seçilen aracı işaretle
            element.classList.add('selected');
            element.querySelector('.vehicle-radio').checked = true;
            
            // Araç seçim hatasını gizle
            document.getElementById('aracSecimHata').classList.add('hidden');
            
            // Ücret hesapla butonuna focus ol
            document.getElementById('hesaplaBtn').focus();
        }
        
        // Close map preview
        document.getElementById('close-map').addEventListener('click', function() {
            document.getElementById('map-container').classList.add('hidden');
        });
        
        // Ücret hesaplama
        document.getElementById('hesaplaBtn').addEventListener('click', function() {
            const nereden = document.getElementById('nereden').value;
            const nereye = document.getElementById('nereye').value;
            const seciliArac = document.querySelector('.vehicle-radio:checked');
            
            if (!nereden || !nereye) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Eksik Bilgi',
                    text: 'Lütfen nereden ve nereye bilgilerini girin.',
                    confirmButtonText: 'Tamam',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }
            
            if (!seciliArac) {
                document.getElementById('aracSecimHata').classList.remove('hidden');
                // Scroll to error
                document.getElementById('aracSecimHata').scrollIntoView({ behavior: 'smooth', block: 'center' });
                return;
            }
            
            const aracGuid = seciliArac.value;
            
            // Hesaplama göstergesi
            const hesaplaBtn = document.getElementById('hesaplaBtn');
            hesaplaBtn.disabled = true;
            hesaplaBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Hesaplanıyor...';
            
            // AJAX isteği ile fiyat hesapla
            fetch('/Rezervasyon/CalculatePrice', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `nereden=${encodeURIComponent(nereden)}&nereye=${encodeURIComponent(nereye)}&aracGuid=${encodeURIComponent(aracGuid)}`
            })
            .then(response => response.json())
            .then(data => {
                // Hesaplama göstergesini kaldır
                hesaplaBtn.disabled = false;
                hesaplaBtn.innerHTML = '<i class="fas fa-calculator mr-2"></i> Ücreti Hesapla';
                
                if (data.success) {
                    // Sonuçları göster
                    document.getElementById('tahminiMesafe').textContent = data.mesafe + ' km';
                    document.getElementById('transferUcreti').textContent = data.ucret + ' ₺';
                    document.getElementById('TahminiKm').value = data.mesafe;
                    document.getElementById('Ucret').value = data.ucret;
                    
                    // Transfer ücreti animasyon
                    const ucretElement = document.getElementById('transferUcreti');
                    ucretElement.classList.add('animate-pulse');
                    setTimeout(() => {
                        ucretElement.classList.remove('animate-pulse');
                    }, 1500);
                    
                    // Submit butonunu etkinleştir
                    const submitBtn = document.getElementById('submitBtn');
                    submitBtn.disabled = false;
                    
                    // Submit container animasyon
                    const submitContainer = document.getElementById('submit-container');
                    submitContainer.classList.remove('animate-pulse');
                    setTimeout(() => {
                        submitContainer.classList.add('animate-pulse');
                    }, 100);
                    
                    // Scroll to bottom
                    submitBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata',
                        text: data.message || 'Ücret hesaplanamadı, lütfen tekrar deneyin.',
                        confirmButtonText: 'Tamam',
                        confirmButtonColor: '#3b82f6'
                    });
                }
            })
            .catch(error => {
                console.error('Hata:', error);
                hesaplaBtn.disabled = false;
                hesaplaBtn.innerHTML = '<i class="fas fa-calculator mr-2"></i> Ücreti Hesapla';
                
                Swal.fire({
                    icon: 'error',
                    title: 'Hata',
                    text: 'Ücret hesaplanırken bir hata oluştu, lütfen tekrar deneyin.',
                    confirmButtonText: 'Tamam',
                    confirmButtonColor: '#3b82f6'
                });
            });
        });
        
        // Form gönderme kontrolü
        document.getElementById('rezervasyonForm').addEventListener('submit', function(event) {
            const seciliArac = document.querySelector('.vehicle-radio:checked');
            
            if (!seciliArac) {
                event.preventDefault();
                document.getElementById('aracSecimHata').classList.remove('hidden');
                document.getElementById('aracSecimHata').scrollIntoView({ behavior: 'smooth', block: 'center' });
                return false;
            }
            
            if (document.getElementById('Ucret').value <= 0) {
                event.preventDefault();
                Swal.fire({
                    icon: 'warning',
                    title: 'Eksik Bilgi',
                    text: 'Lütfen önce ücreti hesaplayın.',
                    confirmButtonText: 'Tamam',
                    confirmButtonColor: '#3b82f6'
                });
                return false;
            }
            
            return true;
        });
        
        // Sayfa yüklendiğinde haritayı başlat
        document.addEventListener('DOMContentLoaded', function() {
            initFreeMap();
            
            // Submit butonu başlangıçta devre dışı
            document.getElementById('submitBtn').disabled = true;
        });
    </script>
    
    <!-- SweetAlert2 for better alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}